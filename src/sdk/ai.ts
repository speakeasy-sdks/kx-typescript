/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDKHooks } from "../hooks/hooks.js";
import * as b64$ from "../lib/base64.js";
import { SDKOptions, serverURLFromOptions } from "../lib/config.js";
import { encodeJSON as encodeJSON$ } from "../lib/encodings.js";
import { HTTPClient } from "../lib/http.js";
import * as schemas$ from "../lib/schemas.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { Data } from "./data.js";
import { Heath } from "./heath.js";
import { Tables } from "./tables.js";
import { Version } from "./version.js";
import * as z from "zod";

export class Ai extends ClientSDK {
    private readonly options$: SDKOptions & { hooks?: SDKHooks };

    constructor(options: SDKOptions = {}) {
        const opt = options as unknown;
        let hooks: SDKHooks;
        if (
            typeof opt === "object" &&
            opt != null &&
            "hooks" in opt &&
            opt.hooks instanceof SDKHooks
        ) {
            hooks = opt.hooks;
        } else {
            hooks = new SDKHooks();
        }

        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
            hooks,
        });

        this.options$ = { ...options, hooks };
        void this.options$;
    }

    private _tables?: Tables;
    get tables(): Tables {
        return (this._tables ??= new Tables(this.options$));
    }

    private _data?: Data;
    get data(): Data {
        return (this._data ??= new Data(this.options$));
    }

    private _heath?: Heath;
    get heath(): Heath {
        return (this._heath ??= new Heath(this.options$));
    }

    private _version?: Version;
    get version(): Version {
        return (this._version ??= new Version(this.options$));
    }

    /**
     * Insert data into a table.
     *
     * @remarks
     * Request body is a tuple of (target table name, data table) serialized into a PyKX octet stream with pykx._wrappers._to_bytes(6, pykx.toq([table, data]), 1)[1])
     */
    async insertRaw(request: Uint8Array | string, options?: RequestOptions): Promise<string> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => b64$.zodOutbound.parse(value$),
            "Input validation failed"
        );
        const body$ = payload$;

        const path$ = this.templateURLComponent("/api/v1/insert")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/octet-stream",
            Accept: "text/plain",
        });

        let security$;
        if (typeof this.options$.apiKeyAuth === "function") {
            security$ = { apiKeyAuth: await this.options$.apiKeyAuth() };
        } else if (this.options$.apiKeyAuth) {
            security$ = { apiKeyAuth: this.options$.apiKeyAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "kdb.ai.insert_raw",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<string>()
            .text(200, z.string())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Insert data into a table.
     *
     * @remarks
     * Request body is a tuple of (target table name, data table) serialized into a PyKX octet stream with pykx._wrappers._to_bytes(6, pykx.toq([table, data]), 1)[1])
     */
    async insertJson(
        request: components.InsertRequestBody,
        options?: RequestOptions
    ): Promise<string> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.InsertRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/v1/insert")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "text/plain",
        });

        let security$;
        if (typeof this.options$.apiKeyAuth === "function") {
            security$ = { apiKeyAuth: await this.options$.apiKeyAuth() };
        } else if (this.options$.apiKeyAuth) {
            security$ = { apiKeyAuth: this.options$.apiKeyAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "kdb.ai.insert_json",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<string>()
            .text(200, z.string())
            .fail(["4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Train index on the table (IVF and IVFPQ only).
     *
     * @remarks
     * Request body is a tuple of (target table name, data table)
     */
    async trainRaw(
        request: Uint8Array | string,
        options?: RequestOptions
    ): Promise<operations.KdbAiTrainRawResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => b64$.zodOutbound.parse(value$),
            "Input validation failed"
        );
        const body$ = payload$;

        const path$ = this.templateURLComponent("/api/v1/train")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/octet-stream",
            Accept: "text/plain",
        });

        let security$;
        if (typeof this.options$.apiKeyAuth === "function") {
            security$ = { apiKeyAuth: await this.options$.apiKeyAuth() };
        } else if (this.options$.apiKeyAuth) {
            security$ = { apiKeyAuth: this.options$.apiKeyAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "kdb.ai.train_raw",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.KdbAiTrainRawResponse>()
            .text(200, operations.KdbAiTrainRawResponse$inboundSchema)
            .text(202, operations.KdbAiTrainRawResponse$inboundSchema)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Train index on the table (IVF and IVFPQ only).
     *
     * @remarks
     * Request body is a tuple of (target table name, data table)
     */
    async trainJson(
        request: components.InsertRequestBody,
        options?: RequestOptions
    ): Promise<operations.KdbAiTrainJsonResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.InsertRequestBody$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/v1/train")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "text/plain",
        });

        let security$;
        if (typeof this.options$.apiKeyAuth === "function") {
            security$ = { apiKeyAuth: await this.options$.apiKeyAuth() };
        } else if (this.options$.apiKeyAuth) {
            security$ = { apiKeyAuth: this.options$.apiKeyAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "kdb.ai.train_json",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<operations.KdbAiTrainJsonResponse>()
            .text(200, operations.KdbAiTrainJsonResponse$inboundSchema)
            .text(202, operations.KdbAiTrainJsonResponse$inboundSchema)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * Vector similarity search
     */
    async vectorSearch(
        request: components.SearchQuery,
        options?: RequestOptions
    ): Promise<components.RCResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.SearchQuery$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/v1/kxi/search")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.apiKeyAuth === "function") {
            security$ = { apiKeyAuth: await this.options$.apiKeyAuth() };
        } else if (this.options$.apiKeyAuth) {
            security$ = { apiKeyAuth: this.options$.apiKeyAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "kdb.ai.search",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<components.RCResponse>()
            .json(200, components.RCResponse$inboundSchema)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }

    /**
     * hybrid similarity search
     */
    async hybridSearch(
        request: components.HybridSearchQuery,
        options?: RequestOptions
    ): Promise<components.RCResponse> {
        const input$ = request;

        const payload$ = schemas$.parse(
            input$,
            (value$) => components.HybridSearchQuery$outboundSchema.parse(value$),
            "Input validation failed"
        );
        const body$ = encodeJSON$("body", payload$, { explode: true });

        const path$ = this.templateURLComponent("/api/v1/kxi/hybridSearch")();

        const query$ = "";

        const headers$ = new Headers({
            "Content-Type": "application/json",
            Accept: "application/json",
        });

        let security$;
        if (typeof this.options$.apiKeyAuth === "function") {
            security$ = { apiKeyAuth: await this.options$.apiKeyAuth() };
        } else if (this.options$.apiKeyAuth) {
            security$ = { apiKeyAuth: this.options$.apiKeyAuth };
        } else {
            security$ = {};
        }
        const context = {
            operationID: "kdb.ai.hybridSearch",
            oAuth2Scopes: [],
            securitySource: this.options$.apiKeyAuth,
        };
        const securitySettings$ = this.resolveGlobalSecurity(security$);

        const request$ = this.createRequest$(
            context,
            {
                security: securitySettings$,
                method: "POST",
                path: path$,
                headers: headers$,
                query: query$,
                body: body$,
                timeoutMs: options?.timeoutMs || this.options$.timeoutMs || -1,
            },
            options
        );

        const response = await this.do$(request$, {
            context,
            errorCodes: ["400", "4XX", "5XX"],
            retryConfig: options?.retries || this.options$.retryConfig,
            retryCodes: options?.retryCodes || ["429", "500", "502", "503", "504"],
        });

        const [result$] = await this.matcher<components.RCResponse>()
            .json(200, components.RCResponse$inboundSchema)
            .fail([400, "4XX", "5XX"])
            .match(response);

        return result$;
    }
}
