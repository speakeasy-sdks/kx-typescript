/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * An object of row data with all of the keys from the column schema for 'table'
 */
export type Rows = {};

export type InsertRequestBody = {
    /**
     * The name of the table to insert data into
     */
    table: string;
    /**
     * Array of objects where each element has a rows worth of data. All rows are required to have all of the keys from the column schema for the associated 'table'. The format of each array element must match results produced by `.j.j table` of a q process
     */
    rows: Array<Rows>;
    /**
     * Optional GUID ID used to synchronize insert requests. Not used for /train requests, as they are already synchronous.
     */
    id?: string | undefined;
};

/** @internal */
export const Rows$inboundSchema: z.ZodType<Rows, z.ZodTypeDef, unknown> = z.object({});

/** @internal */
export type Rows$Outbound = {};

/** @internal */
export const Rows$outboundSchema: z.ZodType<Rows$Outbound, z.ZodTypeDef, Rows> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Rows$ {
    /** @deprecated use `Rows$inboundSchema` instead. */
    export const inboundSchema = Rows$inboundSchema;
    /** @deprecated use `Rows$outboundSchema` instead. */
    export const outboundSchema = Rows$outboundSchema;
    /** @deprecated use `Rows$Outbound` instead. */
    export type Outbound = Rows$Outbound;
}

/** @internal */
export const InsertRequestBody$inboundSchema: z.ZodType<InsertRequestBody, z.ZodTypeDef, unknown> =
    z.object({
        table: z.string(),
        rows: z.array(z.lazy(() => Rows$inboundSchema)),
        id: z.string().optional(),
    });

/** @internal */
export type InsertRequestBody$Outbound = {
    table: string;
    rows: Array<Rows$Outbound>;
    id?: string | undefined;
};

/** @internal */
export const InsertRequestBody$outboundSchema: z.ZodType<
    InsertRequestBody$Outbound,
    z.ZodTypeDef,
    InsertRequestBody
> = z.object({
    table: z.string(),
    rows: z.array(z.lazy(() => Rows$outboundSchema)),
    id: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InsertRequestBody$ {
    /** @deprecated use `InsertRequestBody$inboundSchema` instead. */
    export const inboundSchema = InsertRequestBody$inboundSchema;
    /** @deprecated use `InsertRequestBody$outboundSchema` instead. */
    export const outboundSchema = InsertRequestBody$outboundSchema;
    /** @deprecated use `InsertRequestBody$Outbound` instead. */
    export type Outbound = InsertRequestBody$Outbound;
}
