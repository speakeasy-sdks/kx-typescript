/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    DistanceMetric,
    DistanceMetric$inboundSchema,
    DistanceMetric$outboundSchema,
} from "./distancemetric.js";
import * as z from "zod";

/**
 * Type of the index.
 */
export const Type = {
    Flat: "flat",
} as const;
/**
 * Type of the index.
 */
export type Type = ClosedEnum<typeof Type>;

export type FlatIndex = {
    /**
     * Type of the index.
     */
    type: Type;
    /**
     * Distance metric.
     */
    metric: DistanceMetric;
    /**
     * Number of dimensions.
     */
    dims: number;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(Type);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> = Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
    /** @deprecated use `Type$inboundSchema` instead. */
    export const inboundSchema = Type$inboundSchema;
    /** @deprecated use `Type$outboundSchema` instead. */
    export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const FlatIndex$inboundSchema: z.ZodType<FlatIndex, z.ZodTypeDef, unknown> = z.object({
    type: Type$inboundSchema,
    metric: DistanceMetric$inboundSchema,
    dims: z.number().int(),
});

/** @internal */
export type FlatIndex$Outbound = {
    type: string;
    metric: string;
    dims: number;
};

/** @internal */
export const FlatIndex$outboundSchema: z.ZodType<FlatIndex$Outbound, z.ZodTypeDef, FlatIndex> =
    z.object({
        type: Type$outboundSchema,
        metric: DistanceMetric$outboundSchema,
        dims: z.number().int(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FlatIndex$ {
    /** @deprecated use `FlatIndex$inboundSchema` instead. */
    export const inboundSchema = FlatIndex$inboundSchema;
    /** @deprecated use `FlatIndex$outboundSchema` instead. */
    export const outboundSchema = FlatIndex$outboundSchema;
    /** @deprecated use `FlatIndex$Outbound` instead. */
    export type Outbound = FlatIndex$Outbound;
}
