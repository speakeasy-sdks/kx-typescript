/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import {
    FlatIndex,
    FlatIndex$inboundSchema,
    FlatIndex$Outbound,
    FlatIndex$outboundSchema,
} from "./flatindex.js";
import {
    HNSWIndex,
    HNSWIndex$inboundSchema,
    HNSWIndex$Outbound,
    HNSWIndex$outboundSchema,
} from "./hnswindex.js";
import {
    IVFIndex,
    IVFIndex$inboundSchema,
    IVFIndex$Outbound,
    IVFIndex$outboundSchema,
} from "./ivfindex.js";
import {
    IVFPQIndex,
    IVFPQIndex$inboundSchema,
    IVFPQIndex$Outbound,
    IVFPQIndex$outboundSchema,
} from "./ivfpqindex.js";
import * as z from "zod";

export type VectorIndex = FlatIndex | IVFIndex | HNSWIndex | IVFPQIndex;

export type Columns = {
    name?: string | undefined;
    description?: string | undefined;
    type?: string | undefined;
    attrMem?: string | undefined;
    attrDisk?: string | undefined;
    attrOrd?: string | undefined;
    vectorIndex?: FlatIndex | IVFIndex | HNSWIndex | IVFPQIndex | undefined;
};

export type Table = {
    type?: string | undefined;
    blockSize?: number | undefined;
    prtnCol?: string | undefined;
    sortColsOrd?: string | undefined;
    sortColsDisk?: string | undefined;
    columns?: Array<Columns> | undefined;
};

/** @internal */
export const VectorIndex$inboundSchema: z.ZodType<VectorIndex, z.ZodTypeDef, unknown> = z.union([
    FlatIndex$inboundSchema,
    IVFIndex$inboundSchema,
    HNSWIndex$inboundSchema,
    IVFPQIndex$inboundSchema,
]);

/** @internal */
export type VectorIndex$Outbound =
    | FlatIndex$Outbound
    | IVFIndex$Outbound
    | HNSWIndex$Outbound
    | IVFPQIndex$Outbound;

/** @internal */
export const VectorIndex$outboundSchema: z.ZodType<
    VectorIndex$Outbound,
    z.ZodTypeDef,
    VectorIndex
> = z.union([
    FlatIndex$outboundSchema,
    IVFIndex$outboundSchema,
    HNSWIndex$outboundSchema,
    IVFPQIndex$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorIndex$ {
    /** @deprecated use `VectorIndex$inboundSchema` instead. */
    export const inboundSchema = VectorIndex$inboundSchema;
    /** @deprecated use `VectorIndex$outboundSchema` instead. */
    export const outboundSchema = VectorIndex$outboundSchema;
    /** @deprecated use `VectorIndex$Outbound` instead. */
    export type Outbound = VectorIndex$Outbound;
}

/** @internal */
export const Columns$inboundSchema: z.ZodType<Columns, z.ZodTypeDef, unknown> = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    type: z.string().optional(),
    attrMem: z.string().optional(),
    attrDisk: z.string().optional(),
    attrOrd: z.string().optional(),
    vectorIndex: z
        .union([
            FlatIndex$inboundSchema,
            IVFIndex$inboundSchema,
            HNSWIndex$inboundSchema,
            IVFPQIndex$inboundSchema,
        ])
        .optional(),
});

/** @internal */
export type Columns$Outbound = {
    name?: string | undefined;
    description?: string | undefined;
    type?: string | undefined;
    attrMem?: string | undefined;
    attrDisk?: string | undefined;
    attrOrd?: string | undefined;
    vectorIndex?:
        | FlatIndex$Outbound
        | IVFIndex$Outbound
        | HNSWIndex$Outbound
        | IVFPQIndex$Outbound
        | undefined;
};

/** @internal */
export const Columns$outboundSchema: z.ZodType<Columns$Outbound, z.ZodTypeDef, Columns> = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    type: z.string().optional(),
    attrMem: z.string().optional(),
    attrDisk: z.string().optional(),
    attrOrd: z.string().optional(),
    vectorIndex: z
        .union([
            FlatIndex$outboundSchema,
            IVFIndex$outboundSchema,
            HNSWIndex$outboundSchema,
            IVFPQIndex$outboundSchema,
        ])
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Columns$ {
    /** @deprecated use `Columns$inboundSchema` instead. */
    export const inboundSchema = Columns$inboundSchema;
    /** @deprecated use `Columns$outboundSchema` instead. */
    export const outboundSchema = Columns$outboundSchema;
    /** @deprecated use `Columns$Outbound` instead. */
    export type Outbound = Columns$Outbound;
}

/** @internal */
export const Table$inboundSchema: z.ZodType<Table, z.ZodTypeDef, unknown> = z.object({
    type: z.string().optional(),
    blockSize: z.number().int().optional(),
    prtnCol: z.string().optional(),
    sortColsOrd: z.string().optional(),
    sortColsDisk: z.string().optional(),
    columns: z.array(z.lazy(() => Columns$inboundSchema)).optional(),
});

/** @internal */
export type Table$Outbound = {
    type?: string | undefined;
    blockSize?: number | undefined;
    prtnCol?: string | undefined;
    sortColsOrd?: string | undefined;
    sortColsDisk?: string | undefined;
    columns?: Array<Columns$Outbound> | undefined;
};

/** @internal */
export const Table$outboundSchema: z.ZodType<Table$Outbound, z.ZodTypeDef, Table> = z.object({
    type: z.string().optional(),
    blockSize: z.number().int().optional(),
    prtnCol: z.string().optional(),
    sortColsOrd: z.string().optional(),
    sortColsDisk: z.string().optional(),
    columns: z.array(z.lazy(() => Columns$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Table$ {
    /** @deprecated use `Table$inboundSchema` instead. */
    export const inboundSchema = Table$inboundSchema;
    /** @deprecated use `Table$outboundSchema` instead. */
    export const outboundSchema = Table$outboundSchema;
    /** @deprecated use `Table$Outbound` instead. */
    export type Outbound = Table$Outbound;
}
