/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import { ClosedEnum } from "../../types/enums.js";
import {
    DistanceMetric,
    DistanceMetric$inboundSchema,
    DistanceMetric$outboundSchema,
} from "./distancemetric.js";
import * as z from "zod";

/**
 * Type of the index.
 */
export const IVFPQIndexType = {
    Ivfpq: "ivfpq",
} as const;
/**
 * Type of the index.
 */
export type IVFPQIndexType = ClosedEnum<typeof IVFPQIndexType>;

export type IVFPQIndex = {
    /**
     * Type of the index.
     */
    type: IVFPQIndexType;
    /**
     * Distance metric.
     */
    metric: DistanceMetric;
    /**
     * Number of cells to create (aka clusters, partitions, nlists)
     */
    nclusters?: number | undefined;
    /**
     * Number of splits.
     */
    nsplits?: number | undefined;
    /**
     * Number of bits.
     */
    nbits?: number | undefined;
    /**
     * Number of vectors supplied for training in initial batches
     */
    trainingVectors: number;
};

/** @internal */
export const IVFPQIndexType$inboundSchema: z.ZodNativeEnum<typeof IVFPQIndexType> =
    z.nativeEnum(IVFPQIndexType);

/** @internal */
export const IVFPQIndexType$outboundSchema: z.ZodNativeEnum<typeof IVFPQIndexType> =
    IVFPQIndexType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IVFPQIndexType$ {
    /** @deprecated use `IVFPQIndexType$inboundSchema` instead. */
    export const inboundSchema = IVFPQIndexType$inboundSchema;
    /** @deprecated use `IVFPQIndexType$outboundSchema` instead. */
    export const outboundSchema = IVFPQIndexType$outboundSchema;
}

/** @internal */
export const IVFPQIndex$inboundSchema: z.ZodType<IVFPQIndex, z.ZodTypeDef, unknown> = z.object({
    type: IVFPQIndexType$inboundSchema,
    metric: DistanceMetric$inboundSchema,
    nclusters: z.number().int().optional(),
    nsplits: z.number().int().optional(),
    nbits: z.number().int().optional(),
    trainingVectors: z.number().int(),
});

/** @internal */
export type IVFPQIndex$Outbound = {
    type: string;
    metric: string;
    nclusters?: number | undefined;
    nsplits?: number | undefined;
    nbits?: number | undefined;
    trainingVectors: number;
};

/** @internal */
export const IVFPQIndex$outboundSchema: z.ZodType<IVFPQIndex$Outbound, z.ZodTypeDef, IVFPQIndex> =
    z.object({
        type: IVFPQIndexType$outboundSchema,
        metric: DistanceMetric$outboundSchema,
        nclusters: z.number().int().optional(),
        nsplits: z.number().int().optional(),
        nbits: z.number().int().optional(),
        trainingVectors: z.number().int(),
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace IVFPQIndex$ {
    /** @deprecated use `IVFPQIndex$inboundSchema` instead. */
    export const inboundSchema = IVFPQIndex$inboundSchema;
    /** @deprecated use `IVFPQIndex$outboundSchema` instead. */
    export const outboundSchema = IVFPQIndex$outboundSchema;
    /** @deprecated use `IVFPQIndex$Outbound` instead. */
    export type Outbound = IVFPQIndex$Outbound;
}
