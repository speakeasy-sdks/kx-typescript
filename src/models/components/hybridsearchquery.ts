/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as z from "zod";

export type SparseVectors = {};

/**
 * Index options
 */
export type DenseIndexOptions = {};

/**
 * Index options (k and/or b)
 */
export type SparseIndexOptions = {};

export type HybridSearchQuery = {
    /**
     * Table name
     */
    table: string;
    /**
     * List of dense vectors to do similarity search with.
     */
    denseVectors: Array<Array<number>>;
    /**
     * List of sparse vectors to do similarity search with.
     */
    sparseVectors: Array<SparseVectors>;
    /**
     * Number of results to return.
     */
    n?: number | undefined;
    /**
     * Weight on searches, 0 is sparse, 1 is dense.
     */
    alpha?: number | undefined;
    /**
     * Index options
     */
    denseIndexOptions?: DenseIndexOptions | undefined;
    /**
     * Index options (k and/or b)
     */
    sparseIndexOptions?: SparseIndexOptions | undefined;
    /**
     * Name of the distance column to be added to the result table. If not set, __nn_distance will be used.
     */
    distances?: string | undefined;
    /**
     * List of triples describing the filter of the form comparison operator, column, values for comparison.
     */
    filter?: Array<Array<string>> | undefined;
    /**
     * A list of column names to group by
     */
    groupBy?: Array<string> | undefined;
    /**
     * List of symbol tuples defining the aggregations to perform
     */
    agg?: Array<Array<string>> | undefined;
    /**
     * Columns to be sorted ascending, post query execution
     */
    sortCols?: Array<string> | undefined;
};

/** @internal */
export const SparseVectors$inboundSchema: z.ZodType<SparseVectors, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type SparseVectors$Outbound = {};

/** @internal */
export const SparseVectors$outboundSchema: z.ZodType<
    SparseVectors$Outbound,
    z.ZodTypeDef,
    SparseVectors
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SparseVectors$ {
    /** @deprecated use `SparseVectors$inboundSchema` instead. */
    export const inboundSchema = SparseVectors$inboundSchema;
    /** @deprecated use `SparseVectors$outboundSchema` instead. */
    export const outboundSchema = SparseVectors$outboundSchema;
    /** @deprecated use `SparseVectors$Outbound` instead. */
    export type Outbound = SparseVectors$Outbound;
}

/** @internal */
export const DenseIndexOptions$inboundSchema: z.ZodType<DenseIndexOptions, z.ZodTypeDef, unknown> =
    z.object({});

/** @internal */
export type DenseIndexOptions$Outbound = {};

/** @internal */
export const DenseIndexOptions$outboundSchema: z.ZodType<
    DenseIndexOptions$Outbound,
    z.ZodTypeDef,
    DenseIndexOptions
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DenseIndexOptions$ {
    /** @deprecated use `DenseIndexOptions$inboundSchema` instead. */
    export const inboundSchema = DenseIndexOptions$inboundSchema;
    /** @deprecated use `DenseIndexOptions$outboundSchema` instead. */
    export const outboundSchema = DenseIndexOptions$outboundSchema;
    /** @deprecated use `DenseIndexOptions$Outbound` instead. */
    export type Outbound = DenseIndexOptions$Outbound;
}

/** @internal */
export const SparseIndexOptions$inboundSchema: z.ZodType<
    SparseIndexOptions,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type SparseIndexOptions$Outbound = {};

/** @internal */
export const SparseIndexOptions$outboundSchema: z.ZodType<
    SparseIndexOptions$Outbound,
    z.ZodTypeDef,
    SparseIndexOptions
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SparseIndexOptions$ {
    /** @deprecated use `SparseIndexOptions$inboundSchema` instead. */
    export const inboundSchema = SparseIndexOptions$inboundSchema;
    /** @deprecated use `SparseIndexOptions$outboundSchema` instead. */
    export const outboundSchema = SparseIndexOptions$outboundSchema;
    /** @deprecated use `SparseIndexOptions$Outbound` instead. */
    export type Outbound = SparseIndexOptions$Outbound;
}

/** @internal */
export const HybridSearchQuery$inboundSchema: z.ZodType<HybridSearchQuery, z.ZodTypeDef, unknown> =
    z.object({
        table: z.string(),
        denseVectors: z.array(z.array(z.number())),
        sparseVectors: z.array(z.lazy(() => SparseVectors$inboundSchema)),
        n: z.number().default(5),
        alpha: z.number().optional(),
        denseIndexOptions: z.lazy(() => DenseIndexOptions$inboundSchema).optional(),
        sparseIndexOptions: z.lazy(() => SparseIndexOptions$inboundSchema).optional(),
        distances: z.string().optional(),
        filter: z.array(z.array(z.string())).optional(),
        groupBy: z.array(z.string()).optional(),
        agg: z.array(z.array(z.string())).optional(),
        sortCols: z.array(z.string()).optional(),
    });

/** @internal */
export type HybridSearchQuery$Outbound = {
    table: string;
    denseVectors: Array<Array<number>>;
    sparseVectors: Array<SparseVectors$Outbound>;
    n: number;
    alpha?: number | undefined;
    denseIndexOptions?: DenseIndexOptions$Outbound | undefined;
    sparseIndexOptions?: SparseIndexOptions$Outbound | undefined;
    distances?: string | undefined;
    filter?: Array<Array<string>> | undefined;
    groupBy?: Array<string> | undefined;
    agg?: Array<Array<string>> | undefined;
    sortCols?: Array<string> | undefined;
};

/** @internal */
export const HybridSearchQuery$outboundSchema: z.ZodType<
    HybridSearchQuery$Outbound,
    z.ZodTypeDef,
    HybridSearchQuery
> = z.object({
    table: z.string(),
    denseVectors: z.array(z.array(z.number())),
    sparseVectors: z.array(z.lazy(() => SparseVectors$outboundSchema)),
    n: z.number().default(5),
    alpha: z.number().optional(),
    denseIndexOptions: z.lazy(() => DenseIndexOptions$outboundSchema).optional(),
    sparseIndexOptions: z.lazy(() => SparseIndexOptions$outboundSchema).optional(),
    distances: z.string().optional(),
    filter: z.array(z.array(z.string())).optional(),
    groupBy: z.array(z.string()).optional(),
    agg: z.array(z.array(z.string())).optional(),
    sortCols: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace HybridSearchQuery$ {
    /** @deprecated use `HybridSearchQuery$inboundSchema` instead. */
    export const inboundSchema = HybridSearchQuery$inboundSchema;
    /** @deprecated use `HybridSearchQuery$outboundSchema` instead. */
    export const outboundSchema = HybridSearchQuery$outboundSchema;
    /** @deprecated use `HybridSearchQuery$Outbound` instead. */
    export type Outbound = HybridSearchQuery$Outbound;
}
