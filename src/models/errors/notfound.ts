/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import * as z from "zod";

/**
 * Not Found
 */
export type NotFoundData = {
    description?: any | undefined;
};

/**
 * Not Found
 */
export class NotFound extends Error {
    description?: any | undefined;

    /** The original data that was passed to this error instance. */
    data$: NotFoundData;

    constructor(err: NotFoundData) {
        const message =
            "message" in err && typeof err.message === "string"
                ? err.message
                : `API error occurred: ${JSON.stringify(err)}`;
        super(message);
        this.data$ = err;

        if (err.description != null) {
            this.description = err.description;
        }

        this.name = "NotFound";
    }
}

/** @internal */
export const NotFound$inboundSchema: z.ZodType<NotFound, z.ZodTypeDef, unknown> = z
    .object({
        description: z.any().optional(),
    })
    .transform((v) => {
        return new NotFound(v);
    });

/** @internal */
export type NotFound$Outbound = {
    description?: any | undefined;
};

/** @internal */
export const NotFound$outboundSchema: z.ZodType<NotFound$Outbound, z.ZodTypeDef, NotFound> = z
    .instanceof(NotFound)
    .transform((v) => v.data$)
    .pipe(
        z.object({
            description: z.any().optional(),
        })
    );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace NotFound$ {
    /** @deprecated use `NotFound$inboundSchema` instead. */
    export const inboundSchema = NotFound$inboundSchema;
    /** @deprecated use `NotFound$outboundSchema` instead. */
    export const outboundSchema = NotFound$outboundSchema;
    /** @deprecated use `NotFound$Outbound` instead. */
    export type Outbound = NotFound$Outbound;
}
