/*
 * Code generated by Speakeasy (https://speakeasyapi.com). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type KdbAiQueryResponse = components.RCResponse | ReadableStream<Uint8Array>;

/** @internal */
export const KdbAiQueryResponse$inboundSchema: z.ZodType<
    KdbAiQueryResponse,
    z.ZodTypeDef,
    unknown
> = z.union([components.RCResponse$inboundSchema, z.instanceof(ReadableStream<Uint8Array>)]);

/** @internal */
export type KdbAiQueryResponse$Outbound =
    | components.RCResponse$Outbound
    | ReadableStream<Uint8Array>;

/** @internal */
export const KdbAiQueryResponse$outboundSchema: z.ZodType<
    KdbAiQueryResponse$Outbound,
    z.ZodTypeDef,
    KdbAiQueryResponse
> = z.union([components.RCResponse$outboundSchema, z.instanceof(ReadableStream<Uint8Array>)]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KdbAiQueryResponse$ {
    /** @deprecated use `KdbAiQueryResponse$inboundSchema` instead. */
    export const inboundSchema = KdbAiQueryResponse$inboundSchema;
    /** @deprecated use `KdbAiQueryResponse$outboundSchema` instead. */
    export const outboundSchema = KdbAiQueryResponse$outboundSchema;
    /** @deprecated use `KdbAiQueryResponse$Outbound` instead. */
    export type Outbound = KdbAiQueryResponse$Outbound;
}
