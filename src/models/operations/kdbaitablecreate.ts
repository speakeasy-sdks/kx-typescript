/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as components from "../components/index.js";
import * as z from "zod";

export type VectorIndex =
    | components.FlatIndex
    | components.IVFIndex
    | components.HNSWIndex
    | components.IVFPQIndex;

export type Columns = {
    /**
     * The name of the column in the table. The name must be unique within a single table and should be a single word that represents the purpose of the data within the column. This name must conform to kdb+ naming restrictions and should not use any reserved kdb+ primitives.
     */
    name: string;
    /**
     * A textual description of the column for documentation purposes.
     */
    description?: string | undefined;
    /**
     * The type of the column.
     */
    type: string;
    /**
     * Column attributes to apply when the table is in memory. This typically only applies to the RDB tier.
     */
    attrMem?: string | undefined;
    /**
     * Column attributes to apply when the table is partitioned on disk. This typically only applies to the HDB tier.
     */
    attrDisk?: string | undefined;
    /**
     * Column attributes to apply when the table is ordinal partitioned. This typically only applies to the IDB tier.
     */
    attrOrd?: string | undefined;
    vectorIndex?:
        | components.FlatIndex
        | components.IVFIndex
        | components.HNSWIndex
        | components.IVFPQIndex
        | undefined;
};

/**
 * An object with table metadata and list of columns
 */
export type KdbAiTableCreateRequestBody = {
    /**
     * A textual description for the table. This can be used to provide an overview of the data collected in the current table.
     */
    description: string;
    /**
     * The type of the table is how the table is managed on disk. For time based tables, use partitioned. For supplementary data, use splayed. Note that at least one of your tables must be partitioned.
     */
    type: string;
    /**
     * This value indicates when data should be written to disk. After this many records are received, data is written to disk. Writing more frequently increases disk IO but will use less memory. If omitted, the default value is 12 million records.
     */
    blockSize: number;
    /**
     * The name of the column within the table to use to partition the content. The column type it points to must be a timestamp. This value is required if the table type is set to partitioned.
     */
    prtnCol?: string | undefined;
    /**
     * A list of columns to use for sorting columns in an ordinal partitioned tier. Setting this value will sort data as it migrates into ordinal partitions. If you want data to also have the sorted attribute, set attrOrd to sorted. This typically corresponds to the data sort of the IDB tier.
     */
    sortColsOrd?: Array<string> | undefined;
    /**
     * A list of columns to use for sorting columns in a normal disk tier. Settings this value will sort data as it is migrated into disk partitions. If you want data to also have the sorted attribute, set attrDisk to sorted. This typically corresponds to the data sort of the HDB tier.
     */
    sortColsDisk?: Array<string> | undefined;
    columns: Array<Columns>;
};

export type KdbAiTableCreateRequest = {
    name: string;
    /**
     * An object with table metadata and list of columns
     */
    requestBody: KdbAiTableCreateRequestBody;
};

/**
 * Table created successfully
 */
export type KdbAiTableCreateResponseBody = {};

/** @internal */
export const VectorIndex$inboundSchema: z.ZodType<VectorIndex, z.ZodTypeDef, unknown> = z.union([
    components.FlatIndex$inboundSchema,
    components.IVFIndex$inboundSchema,
    components.HNSWIndex$inboundSchema,
    components.IVFPQIndex$inboundSchema,
]);

/** @internal */
export type VectorIndex$Outbound =
    | components.FlatIndex$Outbound
    | components.IVFIndex$Outbound
    | components.HNSWIndex$Outbound
    | components.IVFPQIndex$Outbound;

/** @internal */
export const VectorIndex$outboundSchema: z.ZodType<
    VectorIndex$Outbound,
    z.ZodTypeDef,
    VectorIndex
> = z.union([
    components.FlatIndex$outboundSchema,
    components.IVFIndex$outboundSchema,
    components.HNSWIndex$outboundSchema,
    components.IVFPQIndex$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VectorIndex$ {
    /** @deprecated use `VectorIndex$inboundSchema` instead. */
    export const inboundSchema = VectorIndex$inboundSchema;
    /** @deprecated use `VectorIndex$outboundSchema` instead. */
    export const outboundSchema = VectorIndex$outboundSchema;
    /** @deprecated use `VectorIndex$Outbound` instead. */
    export type Outbound = VectorIndex$Outbound;
}

/** @internal */
export const Columns$inboundSchema: z.ZodType<Columns, z.ZodTypeDef, unknown> = z.object({
    name: z.string(),
    description: z.string().optional(),
    type: z.string(),
    attrMem: z.string().optional(),
    attrDisk: z.string().optional(),
    attrOrd: z.string().optional(),
    vectorIndex: z
        .union([
            components.FlatIndex$inboundSchema,
            components.IVFIndex$inboundSchema,
            components.HNSWIndex$inboundSchema,
            components.IVFPQIndex$inboundSchema,
        ])
        .optional(),
});

/** @internal */
export type Columns$Outbound = {
    name: string;
    description?: string | undefined;
    type: string;
    attrMem?: string | undefined;
    attrDisk?: string | undefined;
    attrOrd?: string | undefined;
    vectorIndex?:
        | components.FlatIndex$Outbound
        | components.IVFIndex$Outbound
        | components.HNSWIndex$Outbound
        | components.IVFPQIndex$Outbound
        | undefined;
};

/** @internal */
export const Columns$outboundSchema: z.ZodType<Columns$Outbound, z.ZodTypeDef, Columns> = z.object({
    name: z.string(),
    description: z.string().optional(),
    type: z.string(),
    attrMem: z.string().optional(),
    attrDisk: z.string().optional(),
    attrOrd: z.string().optional(),
    vectorIndex: z
        .union([
            components.FlatIndex$outboundSchema,
            components.IVFIndex$outboundSchema,
            components.HNSWIndex$outboundSchema,
            components.IVFPQIndex$outboundSchema,
        ])
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Columns$ {
    /** @deprecated use `Columns$inboundSchema` instead. */
    export const inboundSchema = Columns$inboundSchema;
    /** @deprecated use `Columns$outboundSchema` instead. */
    export const outboundSchema = Columns$outboundSchema;
    /** @deprecated use `Columns$Outbound` instead. */
    export type Outbound = Columns$Outbound;
}

/** @internal */
export const KdbAiTableCreateRequestBody$inboundSchema: z.ZodType<
    KdbAiTableCreateRequestBody,
    z.ZodTypeDef,
    unknown
> = z.object({
    description: z.string(),
    type: z.string(),
    blockSize: z.number().int(),
    prtnCol: z.string().optional(),
    sortColsOrd: z.array(z.string()).optional(),
    sortColsDisk: z.array(z.string()).optional(),
    columns: z.array(z.lazy(() => Columns$inboundSchema)),
});

/** @internal */
export type KdbAiTableCreateRequestBody$Outbound = {
    description: string;
    type: string;
    blockSize: number;
    prtnCol?: string | undefined;
    sortColsOrd?: Array<string> | undefined;
    sortColsDisk?: Array<string> | undefined;
    columns: Array<Columns$Outbound>;
};

/** @internal */
export const KdbAiTableCreateRequestBody$outboundSchema: z.ZodType<
    KdbAiTableCreateRequestBody$Outbound,
    z.ZodTypeDef,
    KdbAiTableCreateRequestBody
> = z.object({
    description: z.string(),
    type: z.string(),
    blockSize: z.number().int(),
    prtnCol: z.string().optional(),
    sortColsOrd: z.array(z.string()).optional(),
    sortColsDisk: z.array(z.string()).optional(),
    columns: z.array(z.lazy(() => Columns$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KdbAiTableCreateRequestBody$ {
    /** @deprecated use `KdbAiTableCreateRequestBody$inboundSchema` instead. */
    export const inboundSchema = KdbAiTableCreateRequestBody$inboundSchema;
    /** @deprecated use `KdbAiTableCreateRequestBody$outboundSchema` instead. */
    export const outboundSchema = KdbAiTableCreateRequestBody$outboundSchema;
    /** @deprecated use `KdbAiTableCreateRequestBody$Outbound` instead. */
    export type Outbound = KdbAiTableCreateRequestBody$Outbound;
}

/** @internal */
export const KdbAiTableCreateRequest$inboundSchema: z.ZodType<
    KdbAiTableCreateRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.string(),
        RequestBody: z.lazy(() => KdbAiTableCreateRequestBody$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            RequestBody: "requestBody",
        });
    });

/** @internal */
export type KdbAiTableCreateRequest$Outbound = {
    name: string;
    RequestBody: KdbAiTableCreateRequestBody$Outbound;
};

/** @internal */
export const KdbAiTableCreateRequest$outboundSchema: z.ZodType<
    KdbAiTableCreateRequest$Outbound,
    z.ZodTypeDef,
    KdbAiTableCreateRequest
> = z
    .object({
        name: z.string(),
        requestBody: z.lazy(() => KdbAiTableCreateRequestBody$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            requestBody: "RequestBody",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KdbAiTableCreateRequest$ {
    /** @deprecated use `KdbAiTableCreateRequest$inboundSchema` instead. */
    export const inboundSchema = KdbAiTableCreateRequest$inboundSchema;
    /** @deprecated use `KdbAiTableCreateRequest$outboundSchema` instead. */
    export const outboundSchema = KdbAiTableCreateRequest$outboundSchema;
    /** @deprecated use `KdbAiTableCreateRequest$Outbound` instead. */
    export type Outbound = KdbAiTableCreateRequest$Outbound;
}

/** @internal */
export const KdbAiTableCreateResponseBody$inboundSchema: z.ZodType<
    KdbAiTableCreateResponseBody,
    z.ZodTypeDef,
    unknown
> = z.object({});

/** @internal */
export type KdbAiTableCreateResponseBody$Outbound = {};

/** @internal */
export const KdbAiTableCreateResponseBody$outboundSchema: z.ZodType<
    KdbAiTableCreateResponseBody$Outbound,
    z.ZodTypeDef,
    KdbAiTableCreateResponseBody
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KdbAiTableCreateResponseBody$ {
    /** @deprecated use `KdbAiTableCreateResponseBody$inboundSchema` instead. */
    export const inboundSchema = KdbAiTableCreateResponseBody$inboundSchema;
    /** @deprecated use `KdbAiTableCreateResponseBody$outboundSchema` instead. */
    export const outboundSchema = KdbAiTableCreateResponseBody$outboundSchema;
    /** @deprecated use `KdbAiTableCreateResponseBody$Outbound` instead. */
    export type Outbound = KdbAiTableCreateResponseBody$Outbound;
}
