/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as components from "../components/index.js";
import * as z from "zod";

export type KdbAiTableListVectorIndex =
    | components.FlatIndex
    | components.IVFIndex
    | components.HNSWIndex
    | components.IVFPQIndex;

export type KdbAiTableListColumns = {
    name?: string | undefined;
    description?: string | undefined;
    type?: string | undefined;
    attrMem?: string | undefined;
    attrDisk?: string | undefined;
    attrOrd?: string | undefined;
    vectorIndex?:
        | components.FlatIndex
        | components.IVFIndex
        | components.HNSWIndex
        | components.IVFPQIndex
        | undefined;
};

export type Trade = {
    type?: string | undefined;
    blockSize?: number | undefined;
    prtnCol?: string | undefined;
    sortColsOrd?: string | undefined;
    sortColsDisk?: string | undefined;
    columns?: Array<KdbAiTableListColumns> | undefined;
};

/** @internal */
export const KdbAiTableListVectorIndex$inboundSchema: z.ZodType<
    KdbAiTableListVectorIndex,
    z.ZodTypeDef,
    unknown
> = z.union([
    components.FlatIndex$inboundSchema,
    components.IVFIndex$inboundSchema,
    components.HNSWIndex$inboundSchema,
    components.IVFPQIndex$inboundSchema,
]);

/** @internal */
export type KdbAiTableListVectorIndex$Outbound =
    | components.FlatIndex$Outbound
    | components.IVFIndex$Outbound
    | components.HNSWIndex$Outbound
    | components.IVFPQIndex$Outbound;

/** @internal */
export const KdbAiTableListVectorIndex$outboundSchema: z.ZodType<
    KdbAiTableListVectorIndex$Outbound,
    z.ZodTypeDef,
    KdbAiTableListVectorIndex
> = z.union([
    components.FlatIndex$outboundSchema,
    components.IVFIndex$outboundSchema,
    components.HNSWIndex$outboundSchema,
    components.IVFPQIndex$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KdbAiTableListVectorIndex$ {
    /** @deprecated use `KdbAiTableListVectorIndex$inboundSchema` instead. */
    export const inboundSchema = KdbAiTableListVectorIndex$inboundSchema;
    /** @deprecated use `KdbAiTableListVectorIndex$outboundSchema` instead. */
    export const outboundSchema = KdbAiTableListVectorIndex$outboundSchema;
    /** @deprecated use `KdbAiTableListVectorIndex$Outbound` instead. */
    export type Outbound = KdbAiTableListVectorIndex$Outbound;
}

/** @internal */
export const KdbAiTableListColumns$inboundSchema: z.ZodType<
    KdbAiTableListColumns,
    z.ZodTypeDef,
    unknown
> = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    type: z.string().optional(),
    attrMem: z.string().optional(),
    attrDisk: z.string().optional(),
    attrOrd: z.string().optional(),
    vectorIndex: z
        .union([
            components.FlatIndex$inboundSchema,
            components.IVFIndex$inboundSchema,
            components.HNSWIndex$inboundSchema,
            components.IVFPQIndex$inboundSchema,
        ])
        .optional(),
});

/** @internal */
export type KdbAiTableListColumns$Outbound = {
    name?: string | undefined;
    description?: string | undefined;
    type?: string | undefined;
    attrMem?: string | undefined;
    attrDisk?: string | undefined;
    attrOrd?: string | undefined;
    vectorIndex?:
        | components.FlatIndex$Outbound
        | components.IVFIndex$Outbound
        | components.HNSWIndex$Outbound
        | components.IVFPQIndex$Outbound
        | undefined;
};

/** @internal */
export const KdbAiTableListColumns$outboundSchema: z.ZodType<
    KdbAiTableListColumns$Outbound,
    z.ZodTypeDef,
    KdbAiTableListColumns
> = z.object({
    name: z.string().optional(),
    description: z.string().optional(),
    type: z.string().optional(),
    attrMem: z.string().optional(),
    attrDisk: z.string().optional(),
    attrOrd: z.string().optional(),
    vectorIndex: z
        .union([
            components.FlatIndex$outboundSchema,
            components.IVFIndex$outboundSchema,
            components.HNSWIndex$outboundSchema,
            components.IVFPQIndex$outboundSchema,
        ])
        .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace KdbAiTableListColumns$ {
    /** @deprecated use `KdbAiTableListColumns$inboundSchema` instead. */
    export const inboundSchema = KdbAiTableListColumns$inboundSchema;
    /** @deprecated use `KdbAiTableListColumns$outboundSchema` instead. */
    export const outboundSchema = KdbAiTableListColumns$outboundSchema;
    /** @deprecated use `KdbAiTableListColumns$Outbound` instead. */
    export type Outbound = KdbAiTableListColumns$Outbound;
}

/** @internal */
export const Trade$inboundSchema: z.ZodType<Trade, z.ZodTypeDef, unknown> = z.object({
    type: z.string().optional(),
    blockSize: z.number().int().optional(),
    prtnCol: z.string().optional(),
    sortColsOrd: z.string().optional(),
    sortColsDisk: z.string().optional(),
    columns: z.array(z.lazy(() => KdbAiTableListColumns$inboundSchema)).optional(),
});

/** @internal */
export type Trade$Outbound = {
    type?: string | undefined;
    blockSize?: number | undefined;
    prtnCol?: string | undefined;
    sortColsOrd?: string | undefined;
    sortColsDisk?: string | undefined;
    columns?: Array<KdbAiTableListColumns$Outbound> | undefined;
};

/** @internal */
export const Trade$outboundSchema: z.ZodType<Trade$Outbound, z.ZodTypeDef, Trade> = z.object({
    type: z.string().optional(),
    blockSize: z.number().int().optional(),
    prtnCol: z.string().optional(),
    sortColsOrd: z.string().optional(),
    sortColsDisk: z.string().optional(),
    columns: z.array(z.lazy(() => KdbAiTableListColumns$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Trade$ {
    /** @deprecated use `Trade$inboundSchema` instead. */
    export const inboundSchema = Trade$inboundSchema;
    /** @deprecated use `Trade$outboundSchema` instead. */
    export const outboundSchema = Trade$outboundSchema;
    /** @deprecated use `Trade$Outbound` instead. */
    export type Outbound = Trade$Outbound;
}
