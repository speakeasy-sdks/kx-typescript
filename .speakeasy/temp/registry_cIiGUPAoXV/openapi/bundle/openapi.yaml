openapi: 3.0.0
info:
    version: 1.0.0
    title: KDB.AI Rest API
servers:
    - url: https://{host}.com
      variables:
        protocol:
            enum:
                - http
                - https
            default: https
        host:
            default: cloud.kdb.ai
            description: KDB.AI server
tags:
    - name: table
    - name: operations
    - name: misc
paths:
    /api/v1/config/table:
        get:
            operationId: kdb.ai.table.list
            summary: Get a list of existing tables with metadata.
            tags:
                - table
            security:
                - APIKeyAuth: []
            responses:
                '200':
                    description: Operation completed successfully.
                    content:
                        application/json:
                            schema:
                                title: trades
                                type: array
                                items:
                                    type: object
                                    title: trade
                                    properties:
                                        type:
                                            type: string
                                        blockSize:
                                            type: integer
                                        prtnCol:
                                            type: string
                                        sortColsOrd:
                                            type: string
                                        sortColsDisk:
                                            type: string
                                        columns:
                                            type: array
                                            items:
                                                type: object
                                                properties:
                                                    name:
                                                        type: string
                                                    description:
                                                        type: string
                                                    type:
                                                        type: string
                                                    attrMem:
                                                        type: string
                                                    attrDisk:
                                                        type: string
                                                    attrOrd:
                                                        type: string
                                                    vectorIndex:
                                                        oneOf:
                                                            - $ref: '#/components/schemas/FlatIndex'
                                                            - $ref: '#/components/schemas/HNSWIndex'
                                                            - $ref: '#/components/schemas/IVFIndex'
                                                            - $ref: '#/components/schemas/IVFPQIndex'
                            example: {"trade": {"type": "splayed", "blockSize": 10000, "prtnCol": "realTime", "sortColsOrd": "sym", "sortColsDisk": "sym", "columns": [{"name": "time", "description": "Time", "type": "timespan"}, {"name": "sym", "description": "Symbol name", "type": "symbol", "attrMem": "grouped", "attrDisk": "parted", "attrOrd": "parted"}, {"name": "realTime", "description": "Real timestamp", "type": "timestamp"}, {"name": "price", "description": "Trade price", "type": "reals", "vectorIndex": {"type": "flat", "metric": "L2", "dims": 10}}, {"name": "size", "description": "Trade size", "type": "long"}]}, "trade2": {"type": "splayed", "blockSize": 10000, "prtnCol": "realTime", "sortColsOrd": "sym", "sortColsDisk": "sym", "columns": [{"name": "time", "description": "Time", "type": "timespan"}, {"name": "sym", "description": "Symbol name", "type": "symbol", "attrMem": "grouped", "attrDisk": "parted", "attrOrd": "parted"}, {"name": "realTime", "description": "Real timestamp", "type": "timestamp"}, {"name": "price", "description": "Trade price", "type": "reals", "vectorIndex": {"type": "flat", "metric": "L2", "dims": 10}}, {"name": "size", "description": "Trade size", "type": "long"}]}}
            x-speakeasy-group: ai.tables
            x-speakeasy-name-override: list
    /api/v1/config/table/{name}:
        get:
            operationId: kdb.ai.table.meta
            summary: Get table metadata.
            tags:
                - table
            security:
                - APIKeyAuth: []
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                            example: {"type": "splayed", "blockSize": 10000, "prtnCol": "realTime", "sortColsOrd": "sym", "sortColsDisk": "sym", "columns": [{"name": "time", "description": "Time", "type": "timespan"}, {"name": "sym", "description": "Symbol name", "type": "symbol", "attrMem": "grouped", "attrDisk": "parted", "attrOrd": "parted"}, {"name": "realTime", "description": "Real timestamp", "type": "timestamp"}, {"name": "price", "description": "Trade price", "type": "reals", "vectorIndex": {"type": "flat", "metric": "L2", "dims": 10}}, {"name": "size", "description": "Trade size", "type": "long"}]}
            x-speakeasy-group: ai.tables
            x-speakeasy-name-override: getMeta
        delete:
            operationId: kdb.ai.table.delete
            summary: Drop table.
            tags:
                - table
            security:
                - APIKeyAuth: []
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: object
                            example: {"message": "success"}
                '400':
                    description: Failed to clean up data from table.
                    content:
                        application/json:
                            schema:
                                type: object
                            example: {"error": "Failed to clean up data from table, table not removed"}
                '404':
                    description: Table not found
                    content:
                        application/json:
                            schema:
                                type: object
                            example: {"error": "Table trade not found"}
            x-speakeasy-group: ai.tables
            x-speakeasy-name-override: delete
        post:
            operationId: kdb.ai.table.create
            summary: Create new table.
            tags:
                - table
            security:
                - APIKeyAuth: []
            parameters:
                - in: path
                  name: name
                  required: true
                  schema:
                    type: string
            requestBody:
                description: An object with table metadata and list of columns
                required: true
                content:
                    application/json:
                        schema:
                            type: object
                            properties:
                                description:
                                    type: string
                                    description: A textual description for the table. This can be used to provide an overview of the data collected in the current table.
                                type:
                                    type: string
                                    description: The type of the table is how the table is managed on disk. For time based tables, use partitioned. For supplementary data, use splayed. Note that at least one of your tables must be partitioned.
                                blockSize:
                                    type: integer
                                    description: This value indicates when data should be written to disk. After this many records are received, data is written to disk. Writing more frequently increases disk IO but will use less memory. If omitted, the default value is 12 million records.
                                prtnCol:
                                    type: string
                                    description: The name of the column within the table to use to partition the content. The column type it points to must be a timestamp. This value is required if the table type is set to partitioned.
                                sortColsOrd:
                                    type: array
                                    items:
                                        type: string
                                    description: A list of columns to use for sorting columns in an ordinal partitioned tier. Setting this value will sort data as it migrates into ordinal partitions. If you want data to also have the sorted attribute, set attrOrd to sorted. This typically corresponds to the data sort of the IDB tier.
                                sortColsDisk:
                                    type: array
                                    items:
                                        type: string
                                    description: A list of columns to use for sorting columns in a normal disk tier. Settings this value will sort data as it is migrated into disk partitions. If you want data to also have the sorted attribute, set attrDisk to sorted. This typically corresponds to the data sort of the HDB tier.
                                columns:
                                    type: array
                                    items:
                                        type: object
                                        properties:
                                            name:
                                                type: string
                                                description: The name of the column in the table. The name must be unique within a single table and should be a single word that represents the purpose of the data within the column. This name must conform to kdb+ naming restrictions and should not use any reserved kdb+ primitives.
                                            description:
                                                type: string
                                                description: A textual description of the column for documentation purposes.
                                            type:
                                                type: string
                                                description: The type of the column.
                                            attrMem:
                                                type: string
                                                description: Column attributes to apply when the table is in memory. This typically only applies to the RDB tier.
                                            attrDisk:
                                                type: string
                                                description: Column attributes to apply when the table is partitioned on disk. This typically only applies to the HDB tier.
                                            attrOrd:
                                                type: string
                                                description: Column attributes to apply when the table is ordinal partitioned. This typically only applies to the IDB tier.
                                            vectorIndex:
                                                oneOf:
                                                    - $ref: '#/components/schemas/FlatIndex'
                                                    - $ref: '#/components/schemas/HNSWIndex'
                                                    - $ref: '#/components/schemas/IVFIndex'
                                                    - $ref: '#/components/schemas/IVFPQIndex'
                                        required:
                                            - name
                                            - type
                            required:
                                - description
                                - type
                                - blockSize
                                - columns
                        example: {"type": "splayed", "blockSize": 10000, "prtnCol": "realTime", "sortColsOrd": "sym", "sortColsDisk": "sym", "columns": [{"name": "time", "description": "Time", "type": "timespan"}, {"name": "sym", "description": "Symbol name", "type": "symbol", "attrMem": "grouped", "attrDisk": "parted", "attrOrd": "parted"}, {"name": "realTime", "description": "Real timestamp", "type": "timestamp"}, {"name": "price", "description": "Trade price", "type": "reals", "vectorIndex": {"type": "flat", "metric": "L2", "dims": 10}}, {"name": "size", "description": "Trade size", "type": "long"}]}
            responses:
                '200':
                    description: Table created successfully
                    content:
                        application/json:
                            schema:
                                type: object
                            example: {"message": "success"}
                '400':
                    description: \'embedding\' is provided but \'vectorIndex\' is not provided.
                    content:
                        application/json:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                            examples:
                                example1:
                                    value: {"error": "'embedding' is provided but 'vectorIndex' is not provided"}
                                example2:
                                    value: {"error": "tss columns shouldnt allow embedding"}
                                example3:
                                    value: {"error": "tss doesn't support the provided metrics"}
                                example4:
                                    value: {"error": "Provided value of 'type' is invalid."}
                                example5:
                                    value: {"error": "Provided value of 'on_insert_error' is invalid."}
                                example6:
                                    value: {"error": "Embedding dimension should be a positive integer"}
                                example7:
                                    value: {"error": "At least 1 additional column is required apart from the embedding column"}
                                example8:
                                    value: {"error": "b parameter in sparse index must be numeric"}
                                example9:
                                    value: {"error": "k parameter in sparse index must be numeric"}
            x-speakeasy-group: ai.tables
            x-speakeasy-name-override: create
    /api/v1/insert:
        post:
            operationId: kdb.ai.insert
            summary: Insert data into a table.
            description: Request body is a tuple of (target table name, data table) serialized into a PyKX octet stream with pykx._wrappers._to_bytes(6, pykx.toq([table, data]), 1)[1])
            tags:
                - operations
            security:
                - APIKeyAuth: []
            requestBody:
                description: A binary octet stream of (target table name, data table), or a JSON body of 'table' and 'rows'
                required: true
                content:
                    application/octet-stream:
                        schema:
                            type: string
                            format: binary
                            description: A tuple of (target table name, data table) serialized into a PyKX octet stream with bytes(pykx.serialize([table, data])).
                    application/json:
                        schema:
                            "$ref": "#/components/schemas/InsertRequestBody"
                        example: {"table": "myTable", "rows": [{"column1": "value1", "column2": [1, 2, 3]}, {"column1": "value2", "column2": [4, 5, 6]}]}
            responses:
                '200':
                    description: Operation completed successfully.
                    content:
                        text/plain:
                            schema:
                                type: string
                            example: Insert successful.
            x-speakeasy-group: ai
            x-speakeasy-name-override: insert
    /api/v1/train:
        post:
            operationId: kdb.ai.train
            summary: Train index on the table (IVF and IVFPQ only).
            description: Request body is a tuple of (target table name, data table)
            tags:
                - operations
            security:
                - APIKeyAuth: []
            requestBody:
                description: A binary octet stream of (target table name, data table), or a JSON body of 'table' and 'rows'
                required: true
                content:
                    application/octet-stream:
                        schema:
                            type: string
                            format: binary
                            description: A tuple of (target table name, data table) serialized into a PyKX octet stream with pykx._wrappers._to_bytes(6, pykx.toq([table, data]), 1)[1])
                    application/json:
                        schema:
                            "$ref": "#/components/schemas/InsertRequestBody"
            responses:
                '200':
                    description: Operation completed successfully.
                    content:
                        text/plain:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                            example: {"message": "Index training complete, XXX extra rows discarded"}
                '202':
                    description: Some records are cached for training
                    content:
                        text/plain:
                            schema:
                                type: object
                                properties:
                                    message:
                                        type: string
                            example: {"message": "XXX records cached for training, threshold is YYY"}
                '400':
                    description: Request training on an index that is already trained
                    content:
                        text/plain:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                            examples:
                                example1:
                                    value: {"error": "Index is already trained"}
                                example2:
                                    value: {"error": "Index does not require training"}
                                example3:
                                    value: {"error": "Error persisting Trained Index to disk, to Persist Index please drop, recreate, and retrain."}
            x-speakeasy-group: ai
            x-speakeasy-name-override: train
    /api/v1/kxi/search:
        post:
            operationId: kdb.ai.search
            summary: Vector similarity search
            tags:
                - operations
            security:
                - APIKeyAuth: []
            requestBody:
                description: Search parameters to be used.
                required: true
                content:
                    application/json:
                        schema:
                            "$ref": "#/components/schemas/SearchQuery"
            responses:
                '200':
                    description: A 2 element list of (RCHeader, search result data).
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/RCResponse"
                            example: {"header": {"rcvTS": "2023-08-30T07:20:24.545000000", "corr": "0b15ed6f-5fd1-4cf4-b361-7038cfd24cdb", "protocol": "gw", "logCorr": "0b15ed6f-5fd1-4cf4-b361-7038cfd24cdb", "client": ":172.18.0.2:8081", "http": "json", "api": ".kxi.search", "userName": "", "userID": "00000000-0000-0000-0000-000000000000", "retryCount": 0, "to": "2023-08-30T07:21:24.545000000", "agg": ":172.18.0.2:9004", "pvVer": 145, "rpID": 1, "refVintage": 79, "startTS": null, "endTS": null, "rc": 0, "ac": 0, "ai": ""}, "payload": [[{"time": "0D01:28:50.439041000", "sym": "sym_728", "realTime": "2023-08-29T12:56:45.159658000", "price": [0.0766345, 0.09716096, 0.2582242, 0.1446433, 0.06520764, 0.6225908, 0.6705471, 0.47045, 0.4888564, 0.1844551], "size": 61, "__nn_distance": 1.438747}, {"time": "0D01:06:42.336717000", "sym": "sym_840", "realTime": "2023-08-29T12:56:46.267478000", "price": [0.3075503, 0.4463586, 0.1877289, 0.3232416, 0.4390686, 0.459191, 0.3393451, 0.6452982, 0.1151347, 0.4050211], "size": 1, "__nn_distance": 1.546051}], [{"time": "0D02:46:17.525844000", "sym": "sym_492", "realTime": "2023-08-29T12:56:49.141114000", "price": [0.55154, 0.1022196, 0.009592914, 0.1932765, 0.07744465, 0.8430967, 0.3613093, 0.2235865, 0.2936444, 0.9695262], "size": 43, "__nn_distance": 1.336594}, {"time": "0D01:06:42.336717000", "sym": "sym_840", "realTime": "2023-08-29T12:56:46.267478000", "price": [0.3075503, 0.4463586, 0.1877289, 0.3232416, 0.4390686, 0.459191, 0.3393451, 0.6452982, 0.1151347, 0.4050211], "size": 1, "__nn_distance": 1.736009}]]}
                '400':
                    description: non-positive n for sparse search
                    content:
                        text/plain:
                            schema:
                                type: object
                            example: {"error": "n for sparse search should be greater than 0"}
            x-speakeasy-group: ai
            x-speakeasy-name-override: vectorSearch
    /api/v1/kxi/hybridSearch:
        post:
            operationId: kdb.ai.hybridSearch
            summary: hybrid similarity search
            tags:
                - operations
            security:
                - APIKeyAuth: []
            requestBody:
                description: search parameters to be used.
                required: true
                content:
                    application/json:
                        schema:
                            "$ref": "#/components/schemas/HybridSearchQuery"
            responses:
                '200':
                    description: A 2 element list of (RCHeader, search result data).
                    content:
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/RCResponse"
                            example: {"header": {"rcvts": "2023-08-30t07:20:24.545000000", "corr": "0b15ed6f-5fd1-4cf4-b361-7038cfd24cdb", "protocol": "gw", "logcorr": "0b15ed6f-5fd1-4cf4-b361-7038cfd24cdb", "client": ":172.18.0.2:8081", "http": "json", "api": ".kxi.hybridsearch", "username": "", "userid": "00000000-0000-0000-0000-000000000000", "retrycount": 0, "to": "2023-08-30t07:21:24.545000000", "agg": ":172.18.0.2:9004", "pvver": 145, "rpid": 1, "refvintage": 79, "startts": null, "endts": null, "rc": 0, "ac": 0, "ai": ""}, "payload": [[{"time": "0d01:28:50.439041000", "sym": "sym_728", "realtime": "2023-08-29t12:56:45.159658000", "dense": [0.0766345, 0.09716096, 0.2582242, 0.1446433, 0.06520764, 0.6225908, 0.6705471, 0.47045, 0.4888564, 0.1844551], "sparse": [{"12": 1}], "__nn_distance": 1.0}, {"time": "0d01:06:42.336717000", "sym": "sym_840", "realtime": "2023-08-29t12:56:46.267478000", "dense": [0.3075503, 0.4463586, 0.1877289, 0.3232416, 0.4390686, 0.459191, 0.3393451, 0.6452982, 0.1151347, 0.4050211], "sparse": [{"2": 1, "12": 2}], "__nn_distance": 0.546051}], [{"time": "0d02:46:17.525844000", "sym": "sym_492", "realtime": "2023-08-29t12:56:49.141114000", "dense": [0.55154, 0.1022196, 0.009592914, 0.1932765, 0.07744465, 0.8430967, 0.3613093, 0.2235865, 0.2936444, 0.9695262], "sparse": [{"34": 1}], "__nn_distance": 1.0}, {"time": "0d01:06:42.336717000", "sym": "sym_840", "realtime": "2023-08-29t12:56:46.267478000", "dense": [0.3075503, 0.4463586, 0.1877289, 0.3232416, 0.4390686, 0.459191, 0.3393451, 0.6452982, 0.1151347, 0.4050211], "sparse": [{"7": 3, "12": 1}], "__nn_distance": 0.736009}]]}
                '400':
                    description: non-positive n for sparse search
                    content:
                        text/plain:
                            schema:
                                type: object
                            example: {"error": "n for sparse search should be greater than 0"}
            x-speakeasy-group: ai.data
            x-speakeasy-name-override: hybridSearch
    /api/v1/data:
        post:
            operationId: kdb.ai.query
            summary: Perform query to get data from a table
            tags:
                - operations
            requestBody:
                description: Get timeseries and splayed data from a database.
                required: true
                content:
                    application/json:
                        schema:
                            "$ref": "#/components/schemas/CanonicalQuery"
            responses:
                '200':
                    description: 'A two element list of (RCHeader; table)'
                    content:
                        application/octet-stream:
                            schema:
                                description: qipc response vector. This vector may be compressed according to https://code.kx.com/q/basics/ipc/#compression if response exceeds 2000 bytes and exceeds compression ratio
                                type: string
                                format: binary
                        application/json:
                            schema:
                                "$ref": "#/components/schemas/RCResponse"
                            example: {"header": {"rcvTS": "2023-08-30T07:21:51.698000000", "corr": "abde21fe-d49f-45cb-b6b3-3f5d27e8ea0c", "protocol": "gw", "logCorr": "abde21fe-d49f-45cb-b6b3-3f5d27e8ea0c", "client": ":172.18.0.2:8081", "http": "json", "api": ".kxi.getData", "userName": "", "userID": "00000000-0000-0000-0000-000000000000", "retryCount": 0, "to": "2023-08-30T07:22:51.698000000", "agg": ":172.18.0.2:9004", "pvVer": 145, "rpID": 1, "refVintage": 79, "startTS": "2023-08-29T00:00:00.000000000", "endTS": "2023-08-29T23:00:00.000000000", "rc": 0, "ac": 0, "ai": ""}, "payload": [{"sym": "sym_104", "avgSize": 13, "maxSize": 13}, {"sym": "sym_159", "avgSize": 21, "maxSize": 21}, {"sym": "sym_160", "avgSize": 64, "maxSize": 64}, {"sym": "sym_185", "avgSize": 61, "maxSize": 74}, {"sym": "sym_187", "avgSize": 24, "maxSize": 24}, {"sym": "sym_197", "avgSize": 20, "maxSize": 20}, {"sym": "sym_203", "avgSize": 52, "maxSize": 52}, {"sym": "sym_220", "avgSize": 12, "maxSize": 12}, {"sym": "sym_23", "avgSize": 30, "maxSize": 30}]}
            x-codeSamples:
                - lang: curl
                  source: |
                    curl -X POST \
                        --header "Content-Type: application/json" \
                        --header "Accepted: application/json" \
                        --data '{"table":"trace", "startTS":"2021.05.09D00:00:00.000000000", "endTS":"2021.05.09D23:00:00.000000000", "agg":[["avgPrice", "avg", "price"],["sdevPrice","sdev","price"]], "groupBy": "sym", "filter": [[">","price", 114.7]]}' \
                        "http://${URL}/data"
                - lang: curl-octet-stream
                  source: |
                    # Save result to file
                    curl -X POST -o results.dat \
                        --header "Content-Type: application/json" \
                        --header "Accepted: application/octet-stream" \
                        --data '{"table":"trace", "startTS":"2021.05.09D00:00:00.000000000", "endTS":"2021.05.09D23:00:00.000000000", "agg":[["avgPrice", "avg", "price"],["sdevPrice","sdev","price"]], "groupBy": "sym", "filter": [[">","price", 114.7]]}' \
                        "http://${URL}/data"
                    # Read the file in with qce, c.java, c.js, etc
                    qce
                    q) -9!read1`:results.dat
            x-speakeasy-name-override: query
    /api/v1/ready:
        get:
            summary: Health check endpoint, returns 200 OK if the service is operating correctly
            operationId: ready
            tags:
                - misc
            responses:
                '200':
                    description: OK
                    content:
                        text/plain:
                            schema:
                                description: OK
                                type: string
                '400':
                    description: SM is not listening on port
                    content:
                        text/plain:
                            schema:
                                type: object
                                properties:
                                    error:
                                        type: string
                            examples:
                                example1:
                                    value: {"error": "SM is not listening on port"}
                                example2:
                                    value: {"error": "SM is not ready"}
                                example3:
                                    value: {"error": "RC is not listening on port"}
                                example4:
                                    value: {"error": "All DAPs not registered as available with RC"}
            x-codeSamples:
                - lang: curl
                  source: "curl -v http://localhost:8082/ready/api/v1/ready          \n"
    /api/v1/version:
        get:
            summary: Check version of kdbai
            operationId: version
            tags:
                - misc
            responses:
                '200':
                    description: OK
                    content:
                        text/plain:
                            schema:
                                description: OK
                                type: string
                            example: {"serverVersion": "KDBAI_DB_VERSION:-", "clientMinVersion": "1.1.0", "clientMaxVersion": "latest"}
            x-codeSamples:
                - lang: curl
                  source: |
                    curl -v localhost:8082/api/v1/version | jq .
            x-speakeasy-name-override: getVersion
components:
    securitySchemes:
        APIKeyAuth:
            type: apiKey
            in: header
            name: X-Api-Key
    schemas:
        Symbol:
            type: string
            x-kx-type: "-11h"
        SymbolList:
            type: array
            items:
                $ref: "#/components/schemas/Symbol"
        RCResponse:
            type: object
            properties:
                header:
                    $ref: "#/components/schemas/RCHeader"
                payload:
                    type: object
        RCHeader:
            type: object
            properties:
                ai:
                    type: string
                    description: Application information. An error reason string. Used in successful HTTP responses, where a database error has occurred
                ac:
                    type: integer
                    description: Application code. Non zero if a database error has occurred
                rc:
                    type: integer
                    description: Return code. Non-zero if ac is set or the resource-coordinator encountered an error
        CanonicalQuery:
            type: object
            required:
                - table
            properties:
                table:
                    type: string
                    description: Table name
                    x-kx-type: "-11h"
                filter:
                    description: List of triples describing the filter of the form comparison operator, column, values for comparison.
                    type: array
                    items:
                        type: array
                        items:
                            type: string
                groupBy:
                    description: A list of column names to group by
                    type: array
                    items:
                        type: string
                        x-kx-type: "-11h"
                agg:
                    description: List of symbol tuples defining the aggregations to perform
                    type: array
                    items:
                        type: array
                        items:
                            type: string
                            x-kx-type: "-11h"
                fill:
                    description: Symbol describing the fill method to use
                    type: string
                    x-kx-type: "-11h"
                temporality:
                    type: string
                    description: Temporality to apply to the query
                    x-kx-type: "-11h"
                sortCols:
                    description: Columns to be sorted ascending, post query execution
                    type: array
                    items:
                        type: string
                        x-kx-type: "-11h"
        SearchQuery:
            type: object
            required:
                - table
                - vectors
                - n
            properties:
                table:
                    type: string
                    description: Table name
                    x-kx-type: "-11h"
                vectors:
                    type: array
                    items:
                        type: array
                        items:
                            type: number
                            format: double
                    description: List of vectors to do similarity search with.
                n:
                    type: number
                    format: long
                    default: 5
                    description: Number of results to return.
                distances:
                    type: string
                    description: Name of the distance column to be added to the result table. If not set, __nn_distance will be used.
                filter:
                    description: List of triples describing the filter of the form comparison operator, column, values for comparison.
                    type: array
                    items:
                        type: array
                        items:
                            type: string
                groupBy:
                    description: A list of column names to group by
                    type: array
                    items:
                        type: string
                        x-kx-type: "-11h"
                agg:
                    description: List of symbol tuples defining the aggregations to perform
                    type: array
                    items:
                        type: array
                        items:
                            type: string
                            x-kx-type: "-11h"
                sortCols:
                    description: Columns to be sorted ascending, post query execution
                    type: array
                    items:
                        type: string
                        x-kx-type: "-11h"
                efSearch:
                    type: number
                    format: long
                    default: 8
                    description: (hnsw use only) Nodes considered when searching
                clusters:
                    type: number
                    format: long
                    default: 8
                    description: (ivf/ivfpq use only) The number of clusters to be traversed when searching
        HybridSearchQuery:
            type: object
            required:
                - table
                - denseVectors
                - sparseVectors
                - n
            properties:
                table:
                    type: string
                    description: Table name
                    x-kx-type: "-11h"
                denseVectors:
                    type: array
                    items:
                        type: array
                        items:
                            type: number
                            format: double
                    description: List of dense vectors to do similarity search with.
                sparseVectors:
                    type: array
                    items:
                        type: object
                    description: List of sparse vectors to do similarity search with.
                n:
                    type: number
                    format: long
                    default: 5
                    description: Number of results to return.
                alpha:
                    type: number
                    format: float
                    description: Weight on searches, 0 is sparse, 1 is dense.
                denseIndexOptions:
                    type: object
                    description: Index options
                sparseIndexOptions:
                    type: object
                    description: Index options (k and/or b)
                distances:
                    type: string
                    description: Name of the distance column to be added to the result table. If not set, __nn_distance will be used.
                filter:
                    description: List of triples describing the filter of the form comparison operator, column, values for comparison.
                    type: array
                    items:
                        type: array
                        items:
                            type: string
                groupBy:
                    description: A list of column names to group by
                    type: array
                    items:
                        type: string
                        x-kx-type: "-11h"
                agg:
                    description: List of symbol tuples defining the aggregations to perform
                    type: array
                    items:
                        type: array
                        items:
                            type: string
                            x-kx-type: "-11h"
                sortCols:
                    description: Columns to be sorted ascending, post query execution
                    type: array
                    items:
                        type: string
                        x-kx-type: "-11h"
        DistanceMetric:
            type: string
            description: Distance metric.
            enum: ["L2", "IP", "CS"]
        FlatIndex:
            type: object
            properties:
                type:
                    type: string
                    description: Type of the index.
                    enum: ["flat"]
                metric:
                    "$ref": "#/components/schemas/DistanceMetric"
                dims:
                    type: integer
                    description: Number of dimensions.
            required:
                - type
                - metric
                - dims
        HNSWIndex:
            type: object
            properties:
                type:
                    type: string
                    description: Type of the index.
                    enum: ["hnsw"]
                metric:
                    "$ref": "#/components/schemas/DistanceMetric"
                dims:
                    type: integer
                    description: Number of dimensions.
                efConstruction:
                    type: integer
                    description: Entry points explored during construction.
                M:
                    type: integer
                    description: Number of connections per vertex.
            required:
                - type
                - metric
                - dims
        IVFIndex:
            type: object
            properties:
                type:
                    type: string
                    description: Type of the index.
                    enum: ["ivf"]
                metric:
                    "$ref": "#/components/schemas/DistanceMetric"
                nclusters:
                    type: integer
                    description: Number of cells to create (aka clusters, partitions, nlists)
                trainingVectors:
                    type: integer
                    description: Number of vectors supplied for training in initial batches
            required:
                - type
                - metric
                - trainingVectors
        InsertRequestBody:
            type: object
            properties:
                table:
                    type: string
                    description: The name of the table to insert data into
                rows:
                    type: array
                    description: Array of objects where each element has a rows worth of data. All rows are required to have all of the keys from the column schema for the associated 'table'. The format of each array element must match results produced by `.j.j table` of a q process
                    items:
                        type: object
                        description: An object of row data with all of the keys from the column schema for 'table'
                id:
                    type: string
                    description: Optional GUID ID used to synchronize insert requests. Not used for /train requests, as they are already synchronous.
            required:
                - table
                - rows
        IVFPQIndex:
            type: object
            properties:
                type:
                    type: string
                    description: Type of the index.
                    enum: ["ivfpq"]
                metric:
                    "$ref": "#/components/schemas/DistanceMetric"
                nclusters:
                    type: integer
                    description: Number of cells to create (aka clusters, partitions, nlists)
                nsplits:
                    type: integer
                    description: Number of splits.
                nbits:
                    type: integer
                    description: Number of bits.
                trainingVectors:
                    type: integer
                    description: Number of vectors supplied for training in initial batches
            required:
                - type
                - metric
                - trainingVectors
